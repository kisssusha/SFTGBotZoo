import os
import json
import logging
from typing import Optional

from aiogram import Router, types
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from services.media import generate_image
from services.media import compress_image_if_needed
from services.scoring import calculate_scores, get_top_animal

router = Router()
logger = logging.getLogger("zoo_bot.result")

ANIMALS_PATH = os.path.join("data", "results.json")
with open(ANIMALS_PATH, encoding="utf-8") as f:
    ANIMALS = json.load(f)


async def show_result(message: types.Message, state: FSMContext):
    data = await state.get_data()
    answers = data.get("answers", [])

    scores = calculate_scores(answers)
    top = get_top_animal(scores)
    if top is None:
        await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à —Ç–æ—Ç–µ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        await state.clear()
        return

    totem_key, totem_score = top
    animal = ANIMALS.get(totem_key)
    if not animal:
        logger.error(f"Totem key '{totem_key}' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ animals.json")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ —Ç–æ—Ç–µ–º–∞.")
        await state.clear()
        return

    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} ‚Äî —Ç–æ—Ç–µ–º: {animal['name']} ({totem_score} –æ—á–∫–æ–≤)")

    image_path: Optional[str]
    try:
        image_path = await generate_image(
            image_path=animal["image"],
            animal_name=animal["name"],
            user_name=message.from_user.first_name
        )
    except Exception:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏—Ç–æ–≥–æ–≤–æ–π –∫–∞—Ä—Ç–∏–Ω–∫–∏")
        image_path = None

    caption = (
        f"üéâ *–¢–≤–æ—ë —Ç–æ—Ç–µ–º–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ ‚Äî {animal['name']}!*\n\n"
        f"_{animal['description']}_\n\n"
        f"[–£–∑–Ω–∞—Ç—å –æ–± –æ–ø–µ–∫–µ]({animal['guardian_link']})"
    )

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîÅ –ï—â—ë —Ä–∞–∑", callback_data="start_quiz")],
        [InlineKeyboardButton(text="üì¢ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è", callback_data=f"share_{totem_key}")],
        [InlineKeyboardButton(text="üí¨ –û—Ç–∑—ã–≤", callback_data="feedback")],
        [InlineKeyboardButton(text="üìû –°–≤—è–∑–∞—Ç—å—Å—è", callback_data=f"contact_{totem_key}")]
    ])
    if image_path:
        image_path = await compress_image_if_needed(image_path)

    if image_path:
        await message.answer_photo(
            photo=types.FSInputFile(image_path),
            caption=caption,
            parse_mode="Markdown",
            reply_markup=kb
        )
    else:
        await message.answer(caption, parse_mode="Markdown", reply_markup=kb)

    await state.clear()
